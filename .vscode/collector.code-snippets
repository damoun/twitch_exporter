{
	// Place your twitch_exporter workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"collector": {
		"description": "Quickly create a collector",
		"scope": "go",
		"prefix": "collector",
		"body": [
			"package collector",
			"",
			"import (",
			"\t\"log/slog\"",
			"",
			"\t\"github.com/damoun/twitch_exporter/config\"",
			"",
			"\t\"github.com/nicklaw5/helix/v2\"",
			"\t\"github.com/prometheus/client_golang/prometheus\"",
			")",
			"",
			"type metricCollector struct {",
			"\tlogger       *slog.Logger",
			"\tclient       *helix.Client",
			"\tchannelNames *config.ChannelNames",
			"",
			"\tmetric typedDesc",
			"}",
			"",
			"func init() {",
			"\tregisterCollector(\"metric\", defaultEnabled, NewMetricCollector)",
			"}",
			"",
			"func NewMetricCollector(logger *slog.Logger, client *helix.Client, cfg *config.Config) (Collector, error) {",
			"\tc := metricCollector{",
			"\t\tlogger:       logger,",
			"\t\tclient:       client,",
			"\t\tchannelNames: cfg.Twitch.Channels,",
			"",
			"\t\tmetric: typedDesc{prometheus.NewDesc(",
			"\t\t\tprometheus.BuildFQName(namespace, \"\", \"metric\"),",
			"\t\t\t\"metric description\",",
			"\t\t\t[]string{\"username\"}, nil,",
			"\t\t), prometheus.GaugeValue},",
			"\t}",
			"",
			"\treturn c, nil",
			"}",
			"",
			"func (c metricCollector) Update(ch chan<- prometheus.Metric) error {",
			"\tif len(*c.channelNames) == 0 {",
			"\t\treturn ErrNoData",
			"\t}",
			"",
			"\tch <- c.metric.mustNewConstMetric(float64(1), \"username\")",
			"",
			"\treturn nil",
			"}",
		],
		"isFileTemplate": true
	}
}